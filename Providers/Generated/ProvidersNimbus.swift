// This file was autogenerated by the `nimbus-fml` crate.
// Trust me, you don't want to mess with it!
#if canImport(MozillaAppServices)
    import MozillaAppServices
#endif

///
/// An object for safely accessing feature configuration from Nimbus.
///
/// This is generated.
public class ProvidersNimbus : FeatureManifestInterface {
    public typealias Features = ProvidersNimbusFeatures

    ///
    /// This should be populated at app launch; this method of initializing features
    /// will be removed in favor of the `initialize` function.
    ///
    public var api: FeaturesInterface?

    ///
    /// This method should be called as early in the startup sequence of the app as possible.
    /// This is to connect the Nimbus SDK (and thus server) with the `ProvidersNimbus`
    /// class.
    ///
    /// The lambda MUST be threadsafe in its own right.
    public func initialize(with getSdk: @escaping () -> FeaturesInterface?) {
        self.getSdk = getSdk
        self.features.rustSyncManagerComponent.with(sdk: getSdk)
        self.reinitialize()
    }

    fileprivate lazy var getSdk: GetSdk = { [self] in self.api }

    ///
    /// Represents all the features supported by Nimbus
    ///
    public let features = Features()

    ///
    /// All generated initialization code. Clients shouldn't need to override or call
    /// this.
    /// We put it in a separate method because we have to be quite careful about what order
    /// the initialization happens inâ€” e.g. when importing other FML files.
    ///
    private func reinitialize() {
        // Nothing left to do.
    }

    ///
    /// Refresh the cache of configuration objects.
    ///
    /// For performance reasons, the feature configurations are constructed once then cached.
    /// This method is to clear that cache for all features configured with Nimbus.
    ///
    /// It must be called whenever the Nimbus SDK finishes the `applyPendingExperiments()` method.
    ///
    public func invalidateCachedValues() {
        features.rustSyncManagerComponent.with(cachedValue: nil)
    }

    ///
    /// A singleton instance of ProvidersNimbus
    ///
    public static let shared = ProvidersNimbus()
}

public class ProvidersNimbusFeatures {
    /// This property defines the rust sync manager feature
    public lazy var rustSyncManagerComponent: FeatureHolder<RustSyncManagerComponent> = {
        FeatureHolder(ProvidersNimbus.shared.getSdk, featureId: "rust-sync-manager-component") { (variables) in
            RustSyncManagerComponent(variables)
        }
    }()
}

// Public interface members begin here.


/// This property defines the rust sync manager feature
public class RustSyncManagerComponent {
    private let _variables: Variables
    private let _defaults: Defaults
    private init(variables: Variables = NilVariables.instance, defaults: Defaults) {
        self._variables = variables
        self._defaults = defaults
    }
    
    struct Defaults {
        let rustSyncManagerStatus: Bool
    }

    public convenience init(
        _ _variables: Variables = NilVariables.instance, 
        rustSyncManagerStatus: Bool = true
    ) {
        self.init(variables: _variables, defaults: Defaults(
            rustSyncManagerStatus: rustSyncManagerStatus))
    }

    /// If true, we will allow the user to use the rust sync manager feature
    public lazy var rustSyncManagerStatus: Bool = {
        self._variables.getBool("rust-sync-manager-status") ?? _defaults.rustSyncManagerStatus
    }()
}



